/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/java_library_plugin.html
 */
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

import com.appland.tasks.ShadowRelocation

plugins {
  id 'java'
  id 'war'
  id 'jacoco'
}

repositories {
  jcenter()
  mavenCentral()
}

version = '0.5.0'

dependencies {
  implementation 'org.yaml:snakeyaml:1.25'
  implementation 'com.alibaba:fastjson:1.2.61'
  implementation 'org.javassist:javassist:3.27.0-GA'
  implementation 'org.reflections:reflections:0.9.11'
  implementation 'javax.servlet:javax.servlet-api:4.0.1'
  implementation 'org.apache.commons:commons-lang3:3.10'
  implementation 'org.slf4j:slf4j-nop:1.7.30'

  testImplementation 'junit:junit:4.12'
  testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
  testImplementation "org.mockito:mockito-core:2.+"
}

jar {
  manifest {
    attributes 'Premain-Class': 'com.appland.appmap.Agent'
  }
}

apply plugin: 'com.github.johnrengelman.shadow'

def versionSuffix
def v = JavaVersion.current()
switch(v = JavaVersion.current()) {
  case '1.8':
    versionSuffix = 'java8'
    break
  case '11':
    versionSuffix = 'java11'
    break
  default:
    throw new GradleException("unknown Java version ${v}, can't copy jar")
}

shadowJar {
  baseName = 'appmap'
  classifier = versionSuffix
  minimize()
  dependencies {
    exclude(dependency('javax.servlet:javax.servlet-api:4.0.1'))
  }
}


///////// taken from 
/////////   https://stackoverflow.com/questions/44787645/how-to-make-the-gradle-shadowjar-task-also-create-sources-and-javadoc-of-its-chi 
///////// not sure if we really need subprojects

///////// TODO: make this part optional, as we only need docs & sources for publishing, not development build

subprojects {
    apply plugin: 'java'
}

// Must be BELOW subprojects{}
task alljavadoc(type: Javadoc) {
    source subprojects.collect { it.sourceSets.main.allJava }
    classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
    destinationDir = file("${buildDir}/docs/javadoc")
}

task javadocJar(type: Jar, dependsOn: alljavadoc) {
    classifier = 'javadoc'
    from alljavadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from subprojects.collect { it.sourceSets.main.allSource }
}

shadowJar.finalizedBy javadocJar
shadowJar.finalizedBy sourcesJar

//////////////// end of codepiece from stackoverflow 



// For backward compatibility, produce a file named
// appmap-<version>.jar, too.
task copyJar(type: Copy) {
  from shadowJar
  into shadowJar.destinationDir
  rename { f -> f - "-${versionSuffix}" }
}
shadowJar.finalizedBy copyJar

sourceSets {
  integrationTest {
    java {
      srcDirs = [ 'src/test/java/com/appland/appmap/integration' ]
    }
    compileClasspath += main.output + test.output + sourceSets.test.compileClasspath
    runtimeClasspath += main.output + test.output + sourceSets.test.runtimeClasspath
  }
}

task integrationTest(type: Test) {
  description = 'Runs integration tests.'
  group = 'verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  dependsOn shadowJar
  maxParallelForks = 1
  jvmArgs "-javaagent:${shadowJar.archiveFile.get()}"
  systemProperty "appmap.debug", "true"
  systemProperty "appmap.config.file", "$rootDir/appmap.yml"
}

test {
  useJUnit()
  dependsOn shadowJar
  dependsOn cleanTest
  exclude 'com/appland/appmap/integration/**'
}

task relocateShadowJar(type: ShadowRelocation) {
    target = tasks.shadowJar
    prefix = "com.appland.shade"
    excludes = [
      "javax.",
      "java."
    ]
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.enabled true
  }
}
